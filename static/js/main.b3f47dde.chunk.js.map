{"version":3,"sources":["components/BuildingImage.js","components/StepButton.js","components/Controls.js","components/HumanDot.js","components/Title.js","utils/humans.js","utils/index.js","App.js","serviceWorker.js","index.js","floor-plan.jpg"],"names":["Image","styled","img","BuildingImage","src","floorPlan","alt","Button","button","StepButton","onClick","text","ControlsContainer","div","StepNumber","stepNumber","style","color","fontSize","Controls","onNext","onPrev","HumanDot","X","Y","prevX","prevY","native","from","x","y","to","fill","width","props","Circle","TitleContainer","BuildingContainer","b","Title","detectCollision","array","humans","newPositions","goneBack","collisionBoundary","newCoords","map","p","i","collisionDetected","newIndex","combinations","reduce","acc","_","i1","Array","length","v","i2","first","second","indexes","comboLength","Math","abs","includes","testingHumans","revitHumans","originOffset","CanvasContainer","Container","App","React","useState","humanPositions","setHumanPosition","waited","setWaited","prevPositions","usePrevious","setStepNumber","height","position","top","left","h","key","w","shadowBlur","max","min","updatedNewPositions","collision","humansStayed","n","flatten","append","s","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.b3f47dde.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport floorPlan from '../floor-plan.jpg';\n\nconst Image = styled.img`\n  height: 100%;\n  width: 100%;\n  pointer-events: none;\n`;\n\nconst BuildingImage = () => (\n  <Image src={floorPlan} alt=\"logo\" />\n);\n\nexport default BuildingImage;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Button = styled.button`\n  height: 32px;\n  background: rgb(240, 40, 50);\n  color: white;\n  border-radius: 4px;\n  font-size: 12px;\n  margin-bottom: 8px;\n  &:hover {\n    background: #FFA500;\n  }\n  cursor: pointer;\n  border: none;\n  outline:none;\n`\n\nconst StepButton = ({onClick, text}) => (\n  <Button onClick={onClick}>{text}</Button>\n);\n\nexport default StepButton;\n","import React from 'react';\nimport styled from 'styled-components';\nimport StepButton from './StepButton';\n\nconst ControlsContainer = styled.div`\n  position: absolute;\n  top: 36px;\n  right: 0;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StepNumber = ({stepNumber}) => (\n  <h5 style={{color: 'black', fontSize: '16px'}}>{`Steps: ${stepNumber}`}</h5>\n)\n\nconst Controls = ({onNext, onPrev, stepNumber}) => (\n  <ControlsContainer>\n    <StepNumber stepNumber={stepNumber} />\n    <StepButton onClick={onPrev} text=\"Previous Step\" />\n    <StepButton onClick={onNext} text=\"Next Step\" />\n  </ControlsContainer>\n);\n\nexport default Controls;\n","import React from 'react';\nimport { Spring, animated } from 'react-spring/renderprops-konva';\n\nconst HumanDot = ({ X, Y, prevX, prevY }) => {\n  return (\n    <Spring\n      native\n      from={{ x: prevX, y: prevY }}\n      to={{\n        x: X,\n        y: Y,\n        fill: 'red',\n        width: 6\n      }}\n    >\n      {props => <animated.Circle {...props} />}\n    </Spring>\n  );\n};\n\nexport default HumanDot;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst TitleContainer = styled.div`\n  height: 48px;\n  color: black;\n  width: 100%;\n  justify-content: center;\n  display: flex;\n  flex-direction: column;\n  padding: 0 12px;\n  position: absolute;\n  top: 32px;\n  left: 100px;\n`;\n\nconst BuildingContainer = styled.b`\n  margin-right: 8px;\n  font-size: 22px;\n`;\n\nconst Title = () => (\n  <TitleContainer>\n    <BuildingContainer>De Rotterdam</BuildingContainer>\n    Evacuation process\n  </TitleContainer>\n);\n\nexport default Title;\n","import {pairsOfArray} from '.';\n\nexport const detectCollision = ({\n  humans,\n  newPositions,\n  goneBack,\n  collisionBoundary\n}) => {\n  const newCoords = newPositions.map((p, i) => ({\n    x: humans[i][p].x,\n    y: humans[i][p].y\n  }));\n  let collisionDetected = false;\n  let newIndex = 10000000;\n  const combinations = pairsOfArray(newCoords);\n  const comboLength = combinations.length;\n  for (let i = 0; i < comboLength; i++) {\n    const { first, second, indexes } = combinations[i];\n    if (\n      Math.abs(first.x - second.x) < collisionBoundary &&\n      Math.abs(first.y - second.y) < collisionBoundary\n    ) {\n      if (\n        newPositions[indexes[0]] === humans[indexes[0]].length - 1 ||\n        newPositions[indexes[1]] === humans[indexes[1]].length - 1\n      ) {\n        continue;\n      }\n      if (goneBack.includes(indexes[0])) {\n        newIndex = indexes[1];\n      } else {\n        newIndex = indexes[0];\n      }\n      collisionDetected = true;\n      break;\n    }\n  }\n  return {\n    collisionDetected,\n    goneBack: newIndex !== 10000000 ? [...goneBack, newIndex] : goneBack\n  };\n};\n\nexport const distanceToSafety = (humans, humanIndex, position) => {\n  const currentCoords = {\n    x: humans[humanIndex][position].x,\n    y: humans[humanIndex][position].y\n  }\n  const nextCoords = {\n    x: humans[humanIndex][position + 1].x,\n    y: humans[humanIndex][position + 1].y\n  }\n  const distanceFromNextStep = Math.sqrt(\n    Math.pow(nextCoords.x - currentCoords.x, 2) +\n    Math.pow(nextCoords.y - currentCoords.y, 2)\n  )\n  return distanceFromNextStep;\n}","export const pairsOfArray = array => array.reduce(\n  (acc, _, i1) => [\n    ...acc,\n    ...new Array(array.length - 1 - i1).fill(0).map((v, i2) => ({\n      first: array[i1],\n      second: array[i1 + 1 + i2],\n      indexes: [i1, i1 + 1 + i2]\n    }))\n  ],\n  []\n);\n\nexport const distanceToSafety = (humans, humanIndex, position) => {\n  const currentCoords = {\n    x: humans[humanIndex][position].x,\n    y: humans[humanIndex][position].y\n  }\n  const nextCoords = {\n    x: humans[humanIndex][position + 1].x,\n    y: humans[humanIndex][position + 1].y\n  }\n  const distanceFromNextStep = Math.sqrt(\n    Math.pow(nextCoords.x - currentCoords.x, 2) +\n    Math.pow(nextCoords.y - currentCoords.y, 2)\n  )\n  return distanceFromNextStep;\n}","import React from 'react';\nimport './App.css';\nimport styled from 'styled-components';\nimport {append, flatten} from 'ramda';\nimport {Stage, Layer, Circle} from 'react-konva';\nimport {usePrevious} from 'react-use';\nimport revitHumans from './revitNew.json';\nimport {\n  BuildingImage,\n  Controls,\n  HumanDot,\n  Title\n} from './components';\nimport {detectCollision} from './utils/humans';\n\nconst testingHumans = revitHumans;\n\nconst imageHeight = 765;\nconst imageWidth = 874;\nconst buildingCanvasWidth = 627;\nconst buildingCanvasHeight = 689;\nconst originOffset = {\n  x: 112,\n  y: 54\n}\nconst buildingRevitWidth = 42070;\nconst buildingRevitHeight = 46280;\nconst humanXToCanvasX = buildingRevitWidth / buildingCanvasWidth;\nconst humanYToCanvasY = buildingRevitHeight / buildingCanvasHeight;\n\nconst collisionBoundary = 300;\n\nconst CanvasContainer = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  justify-content: center;\n  padding: 20px 0;\n  width: ${imageWidth};\n  height: ${imageHeight};\n`;\n\nconst Container = styled.div`\n  min-height: 100vh;\n  overflow: auto;\n  padding: 20px 0;\n  background: white;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst App = () => {\n  const [humanPositions, setHumanPosition] = React.useState(Array(testingHumans.length).fill(0));\n  const [waited, setWaited] = React.useState([]);\n  const prevPositions = usePrevious(humanPositions) || Array(testingHumans.length).fill(0);\n  const [stepNumber, setStepNumber] = React.useState(0);\n  \n  const goBack = () => {\n    if (stepNumber === 0) return;\n    const newPositions = humanPositions.map(p => Math.max(0, p - 1));\n    setStepNumber(stepNumber - 1);\n    setHumanPosition(newPositions);\n  };\n\n  const goForward = () => {\n    const newPositions = humanPositions.map((p, i) =>\n      Math.min(testingHumans[i].length - 1, p + 1)\n    );\n    setStepNumber(stepNumber + 1);\n    let updatedNewPositions = newPositions;\n    const { collisionDetected, goneBack } = detectCollision({\n      humans: testingHumans,\n      newPositions: updatedNewPositions,\n      goneBack: [],\n      collisionBoundary\n    });\n    let collision = collisionDetected;\n    let humansStayed = goneBack;\n    while (collision) {\n      // eslint-disable-next-line no-loop-func\n      updatedNewPositions = newPositions.map((n, i) =>\n        humansStayed.includes(i) ? n - 1 : n\n      );\n      const { collisionDetected, goneBack } = detectCollision({\n        humans: testingHumans,\n        newPositions: updatedNewPositions,\n        goneBack: humansStayed,\n        collisionBoundary\n      });\n      collision = collisionDetected;\n      humansStayed = goneBack;\n    }\n    setWaited(flatten(append(waited, humansStayed.map(s => ({\n      x: testingHumans[s][updatedNewPositions[s]].x,\n      y: testingHumans[s][updatedNewPositions[s]].y,\n    })))));\n    setHumanPosition(updatedNewPositions);\n  };\n\n  return (\n    <Container>\n      <Title />\n      <div style={{height: imageHeight, width: imageWidth}}>\n        <BuildingImage />\n        <CanvasContainer>\n          <Stage\n            width={buildingCanvasWidth}\n            height={buildingCanvasHeight}\n            style={{ position: 'absolute', top: originOffset.y, left: originOffset.x }}\n          >\n            <Layer>\n              {testingHumans.map((h, i) => (\n                <HumanDot\n                  key={i}\n                  prevX={h[prevPositions[i]].x / humanXToCanvasX}\n                  prevY={(buildingRevitHeight - h[prevPositions[i]].y) / humanYToCanvasY}\n                  X={h[humanPositions[i]].x / humanXToCanvasX}\n                  Y={(buildingRevitHeight - h[humanPositions[i]].y) / humanYToCanvasY}\n                />\n              ))}\n            </Layer>\n            <Layer>\n              {waited.map(((w, i) =>\n                <Circle\n                  key={i}\n                  x={w.x/humanXToCanvasX}\n                  y={(buildingRevitHeight - w.y)/humanYToCanvasY}\n                  width={27}\n                  shadowBlur={10}\n                  fill='rgba(255, 0, 0, 0.008)'\n                />\n              ))}\n            </Layer>\n          </Stage>\n        </CanvasContainer>\n        <Controls\n          onPrev={goBack}\n          onNext={goForward}\n          stepNumber={stepNumber}\n        />\n      </div>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/floor-plan.11102fb2.jpg\";"],"sourceRoot":""}