{"version":3,"sources":["App.js","serviceWorker.js","index.js","floor-plan.jpg"],"names":["testingHumans","Button","window","innerHeight","styled","button","pairsOfArray","array","reduce","acc","val","i1","Array","length","fill","map","v","i2","first","second","indexes","ColoredRect","X","Y","prevX","prevY","native","from","x","y","to","width","props","Circle","detectCollision","newPositions","goneBack","newCoords","p","i","collisionDetected","newIndex","combinations","comboLength","Math","abs","includes","Image","img","Container","div","App","React","useState","humanPositions","setHumanPosition","waited","setWaited","prevPositions","usePrevious","stepNumber","setStepNumber","style","height","color","justifyContent","display","flexDirection","padding","position","top","left","marginRight","fontSize","src","floorPlan","alt","bottom","h","key","w","shadowBlur","right","onClick","max","min","updatedNewPositions","collision","humansStayed","n","flatten","append","s","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.e0cf844d.chunk.js","sourcesContent":["/* eslint-disable */\nimport React from 'react';\n// import {remote} from 'electron';\n// const path = remote.require('path');\nimport './App.css';\nimport styled from 'styled-components';\nimport { reduce, addIndex, append, flatten } from 'ramda';\nimport { Stage, Layer, Text, Circle } from 'react-konva';\nimport { usePrevious } from 'react-use';\nimport { Spring, animated } from 'react-spring/renderprops-konva';\nimport floorPlan from './floor-plan.jpg';\nimport humans from './revitNew.json';\n\nconst testingHumans = humans;\n// function usePrevious(value) {\n//   // The ref object is a generic container whose current property is mutable ...\n//   // ... and can hold any value, similar to an instance property on a class\n//   const ref = useRef();\n\n//   // Store current value in ref\n//   useEffect(() => {\n//     ref.current = value;\n//   }, [value]); // Only re-run if value changes\n\n//   // Return previous value (happens before update in useEffect above)\n//   return ref.current;\n// }\n\n// const reduceIndexed = addIndex(reduce);\n\n// const screenWidth = window.innerWidth;\nconst screenHeight = window.innerHeight;\nconst imageHeight = 765;\nconst imageWidth = 874;\nconst leftPadding = 0.121  * imageWidth;\nconst topPadding = 0.044 * imageHeight;\n\nconst Button = styled.button`\n  height: 32px;\n  background: rgb(240, 40, 50);\n  color: white;\n  border-radius: 4px;\n  font-size: 12px;\n  margin-bottom: 8px;\n  &:hover {\n    background: #FFA500;\n  }\n  cursor: pointer;\n  border: none;\n  outline:none;\n`;\n\nconst pairsOfArray = array =>\n  array.reduce(\n    (acc, val, i1) => [\n      ...acc,\n      ...new Array(array.length - 1 - i1).fill(0).map((v, i2) => ({\n        first: array[i1],\n        second: array[i1 + 1 + i2],\n        indexes: [i1, i1 + 1 + i2]\n      }))\n    ],\n    []\n  );\n\nconst ColoredRect = ({ X, Y, prevX, prevY }) => {\n  return (\n    <Spring\n      native\n      from={{ x: prevX, y: prevY }}\n      to={{\n        x: X,\n        y: Y,\n        fill: 'red',\n        width: 6\n      }}\n    >\n      {props => <animated.Circle {...props} />}\n    </Spring>\n  );\n};\n\nconst collisionBoundary = 300;\n\nconst detectCollision = (newPositions, goneBack) => {\n  const newCoords = newPositions.map((p, i) => ({\n    x: testingHumans[i][p].x,\n    y: testingHumans[i][p].y\n  }));\n  // console.log(newCoords[128], newCoords[118])\n  let collisionDetected = false;\n  let newIndex = 10000000;\n  const combinations = pairsOfArray(newCoords);\n  const comboLength = combinations.length;\n  for (let i = 0; i < comboLength; i++) {\n    const { first, second, indexes } = combinations[i];\n    if (\n      Math.abs(first.x - second.x) < collisionBoundary &&\n      Math.abs(first.y - second.y) < collisionBoundary\n    ) {\n      if (\n        newPositions[indexes[0]] === testingHumans[indexes[0]].length - 1 ||\n        newPositions[indexes[1]] === testingHumans[indexes[1]].length - 1\n      ) {\n        continue;\n      }\n      // console.log(`collision between ${indexes[0]} and ${indexes[1]}`);\n      if (goneBack.includes(indexes[0])) {\n        // console.log(`${indexes[1]} went back`)\n        newIndex = indexes[1];\n      } else {\n        // console.log(`${indexes[0]} went back`)\n        newIndex = indexes[0];\n      }\n      collisionDetected = true;\n      break;\n    }\n  }\n  return {\n    collisionDetected,\n    goneBack: newIndex !== 10000000 ? [...goneBack, newIndex] : goneBack\n  };\n};\n\nconst detectCollisions = humans => {\n  let collisionDetected = false;\n  const combinations = pairsOfArray(humans);\n  const comboLength = combinations.length;\n  for (let i = 0; i < comboLength; i++) {\n    const first = combinations[i][0];\n    const second = combinations[i][1];\n    if (\n      Math.abs(first.x - second.x) < collisionBoundary &&\n      Math.abs(first.y - second.y) < collisionBoundary\n    ) {\n      first.goBack();\n      collisionDetected = true;\n      break;\n    }\n  }\n  return collisionDetected;\n};\n// const appPath = remote.app.getAppPath();\n\n// export const refImage = relPath => {\n//   console.log(appPath);\n//   const p = path.join(appPath, relPath)\n//   console.log('teliko', p);\n//   return `file://${p}`;\n// };\n\nconst Image = styled.img`\n  height: 100%;\n  width: 100%;\n  pointer-events: none;\n  /* position: absolute; */\n  /* top: 10px; */\n  /* left: calc(50% - (1.143 * 100vh - 20px)/2); */\n`;\nconst Container = styled.div`\n  /* position: relative; */\n  /* background-size: contain; */\n  min-height: 100vh;\n  overflow: auto;\n  padding: 20px 0;\n  background: white;\n  display: flex;\n  flex-direction: column;\n  /* justify-content: center; */\n  align-items: center;\n`;\n\nconst App = () => {\n  const [humanPositions, setHumanPosition] = React.useState(\n    Array(testingHumans.length).fill(0)\n  );\n  const [waited, setWaited] = React.useState([]);\n  const prevPositions =\n    usePrevious(humanPositions) || Array(testingHumans.length).fill(0);\n  const [stepNumber, setStepNumber] = React.useState(0);\n  const goBack = () => {\n    if (stepNumber === 0) return;\n    const newPositions = humanPositions.map(p => Math.max(0, p - 1));\n    setStepNumber(stepNumber - 1);\n    setHumanPosition(newPositions);\n  };\n  const goForward = () => {\n    const newPositions = humanPositions.map((p, i) =>\n      Math.min(testingHumans[i].length - 1, p + 1)\n    );\n    setStepNumber(stepNumber + 1);\n    let updatedNewPositions = newPositions;\n    const { collisionDetected, goneBack } = detectCollision(\n      updatedNewPositions,\n      []\n    );\n    let collision = collisionDetected;\n    let humansStayed = goneBack;\n    while (collision) {\n      updatedNewPositions = newPositions.map((n, i) =>\n        humansStayed.includes(i) ? n - 1 : n\n      );\n      const { collisionDetected, goneBack } = detectCollision(\n        updatedNewPositions,\n        humansStayed\n      );\n      collision = collisionDetected;\n      humansStayed = goneBack;\n    }\n    setWaited(flatten(append(waited, humansStayed.map(s => ({\n      x: testingHumans[s][updatedNewPositions[s]].x,\n      y: testingHumans[s][updatedNewPositions[s]].y,\n    })))));\n    setHumanPosition(updatedNewPositions);\n  };\n  // console.log('8', humanPositions[8]);\n  // console.log('9', humanPositions[9]);\n  // console.log('12', humanPositions[12]);\n\n  return (\n    <Container>\n      <div style={{\n        height: '48px',\n        color: 'black',\n        width: '100%',\n        justifyContent: 'center',\n        display: 'flex',\n        flexDirection: 'column',\n        padding: '0 12px',\n        position: 'absolute',\n        top: 32,\n        left: 100\n      }}\n      >\n        <b style={{marginRight: '8px', fontSize: '22px'}}>De Rotterdam</b> Evacuation process\n      </div>\n      <div style={{height: '765px', width: '874px'}}>\n        <Image src={floorPlan} alt=\"logo\" />\n        <div\n          style={{\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            display: 'flex',\n            justifyContent: 'center',\n            // alignItems: 'center',\n            padding: '20px 0',\n            // left: `calc(50vw - ${imageWidth / 2}px)`,\n            width: '874px',\n            height: '765px'\n          }}\n        >\n          <Stage\n            height={689}\n            width={627}\n            style={{ position: 'absolute', top: 54, left: 112 }}\n          >\n            <Layer>\n              {testingHumans.map((h, i) => (\n                // <Text\n                //   text={i}\n                //   fontSize={8}\n                //   x={h[humanPositions[i]].x/65.8}\n                //   y={(46280 - h[humanPositions[i]].y)/65.8}\n                // />\n                <ColoredRect\n                  key={i}\n                  prevX={h[prevPositions[i]].x / 67.07}\n                  prevY={(46280 - h[prevPositions[i]].y) / 67.17}\n                  X={h[humanPositions[i]].x / 67.07}\n                  Y={(46280 - h[humanPositions[i]].y) / 67.17}\n                />\n              ))}\n            </Layer>\n            <Layer>\n              {waited.map(((w, i) =>\n                <Circle\n                  key={i}\n                  x={w.x/67.07}\n                  y={(46280 - w.y)/67.17}\n                  // fill=\"red\"\n                  // radius={10}\n                  width={27}\n                  shadowBlur={10}\n                  fill='rgba(255, 0, 0, 0.008)'\n                />\n              ))}\n            </Layer>\n          </Stage>\n          <div style={{ position: 'absolute', top: 36, right: 0, display: 'flex', flexDirection: 'column' }}>\n            <h5 style={{color: 'black', fontSize: '16px'}}>{`Steps: ${stepNumber}`}</h5>\n            <Button onClick={goBack}>Previous Step</Button>\n            <Button onClick={goForward}>Next Step</Button>\n          </div>\n        </div>\n      </div>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/floor-plan.11102fb2.jpg\";"],"sourceRoot":""}